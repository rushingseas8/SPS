#BlueJ class context
comment0.params=args
comment0.target=void\ main(java.lang.String[])
comment0.text=\n\ The\ testing\ method.\ Doesn't\ have\ an\ explicit\ purpose\ yet.\n
comment1.params=
comment1.target=void\ pushSensors()
comment10.params=groupID\ sensorID\ data
comment10.target=java.lang.String\ post(java.lang.String,\ java.lang.String,\ java.lang.String)
comment11.params=
comment11.target=void\ clearAllData()
comment11.text=\n\ This\ method\ will\ clear\ all\ of\ the\ server's\ data.\n
comment12.params=varName\ data
comment12.target=java.lang.String\ post(java.lang.String,\ java.lang.String)
comment12.text=\n\ Posts\ data\ to\ the\ default\ group/sensor\ group.\n\ \n\ @param\ varName\ The\ name\ of\ the\ variable\ we\ are\ modifying.\ This\ needs\ to\n\ \ be\ one\ of\ the\ variables\ provided\:\ tripSummaryUpload,\ vehicleHealthUpload,\n\ \ homeWindowOpen,\ homeWindowClosed,\ homeGarageOpen,\ homeGarageClosed,\n\ \ homeSmokeAlarmOn,\ homeSmokeAlarmOff,\ homeSmokeAlarmBatteryLow,\n\ \ homeFireAlarmOn,\ homeFireAlarmOff,\ homeWaterSensorAlarmOn,\n\ \ or\ homeWaterSensorAlarmOff.\ Do\ not\ add\ extra\ quotes.\n\ @param\ data\ The\ data\ that\ will\ be\ associated\ with\ "varName".\ This\n\ \ can\ be\ any\ valid\ JSON,\ and\ if\ it\ is\ invalid,\ this\ command\ will\ not\n\ \ be\ guaranteed\ to\ have\ predictable\ behavior.\ \n
comment13.params=groupID\ sensorID\ varName\ data
comment13.target=java.lang.String\ post(java.lang.String,\ java.lang.String,\ java.lang.String,\ java.lang.String)
comment13.text=\n\ Posts\ the\ given\ data,\ "data"\ to\ "varName",\ under\ the\ group\ "groupID"\ and\ the\ sensor\ "sensorID".\n\ \n\ @param\ groupID\ The\ groupID\ to\ which\ we\ are\ posting.\n\ @param\ sensorID\ The\ sensorID\ to\ which\ we\ are\ posting.\n\ @param\ varName\ The\ name\ of\ the\ variable\ we\ are\ modifying.\ This\ needs\ to\n\ \ be\ one\ of\ the\ variables\ provided\:\ tripSummaryUpload,\ vehicleHealthUpload,\n\ \ homeWindowOpen,\ homeWindowClosed,\ homeGarageOpen,\ homeGarageClosed,\n\ \ homeSmokeAlarmOn,\ homeSmokeAlarmOff,\ homeSmokeAlarmBatteryLow,\n\ \ homeFireAlarmOn,\ homeFireAlarmOff,\ homeWaterSensorAlarmOn,\n\ \ or\ homeWaterSensorAlarmOff.\ Do\ not\ add\ extra\ quotes.\n\ @param\ data\ The\ data\ that\ will\ be\ associated\ with\ "varName".\ This\n\ \ can\ be\ any\ valid\ JSON,\ and\ if\ it\ is\ invalid,\ this\ command\ will\ not\n\ \ be\ guaranteed\ to\ have\ predictable\ behavior.\ \n
comment14.params=data
comment14.target=java.lang.String\ parse(java.lang.String)
comment14.text=\n\ Parses\ the\ raw\ data\ given\ into\ somewhat\ neat\ looking\ JSON\ parsing.\n\ \n\ @param\ data\ The\ raw\ data\ to\ be\ parsed.\n\ @return\ A\ (hopefully\!)\ neatly\ formatted\ String\ built\ using\ JSON\n\ \ parsing,\ based\ on\ "data".\ If\ "data"\ is\ null,\ this\ will\ return\ null.\n
comment15.params=indentNumber
comment15.target=java.lang.String\ indent(int)
comment15.text=\n\ This\ is\ a\ private\ helper\ method\ that\ simply\ gives\ back\ a\ String\n\ containing\ 'indentNumber'\ tabs.\n\ \n\ @param\ indentNumber\ The\ number\ of\ tabs\ in\ the\ return\ String.\n\ @return\ an\ indentation\ String\ that\ consists\ of\ 'indentNumber'\ tabs.\n
comment16.params=rawData
comment16.target=java.lang.String[]\ getValidVariableNames(java.lang.String)
comment16.text=\n\ Returns\ a\ String\ array\ containing\ all\ of\ the\ possible\ variables\n\ that\ the\ user\ can\ call\ upon.\n\ \n\ @param\ rawData\ The\ data\ through\ which\ we\ should\ scan\ for\ variables.\n\ @return\ An\ array\ containing\ all\ of\ the\ variable\ names\ in\ the\ data.\n\ \ Any\ of\ these\ can\ be\ called\ into\ "getData(rawData,\ varName)"\ to\ get\n\ \ the\ associated\ data\ with\ that\ variable.\n
comment17.params=rawData\ dataName
comment17.target=java.lang.String\ getData(java.lang.String,\ java.lang.String)
comment17.text=\n\ Gets\ the\ JSON\ value\ of\ "data"\ for\ a\ given\ variable,\ dataName.\ \n\ \n\ This\ method\ MAY\ NOT\ work\ if\ "rawData"\ is\ processed,\ hence\ the\ \n\ reason\ for\ the\ naming\ of\ the\ variable.\ You\ may\ get\ the\ right\n\ answer,\ but\ with\ the\ spacing\ all\ janky.\ It\ is\ HIGHLY\ RECOMMENDED\n\ that\ you\ only\ use\ this\ method\ with\ raw\ data.\n\ \n\ Example\ usage\:\ getData(getData(),\ "vehicle.trip.arrived")\ will\ \n\ return\ the\ data\ value\:\ '{"tripSummaryUpload"\:{"foo"\:1,"bar"\:2}}'.\n\ \n\ @param\ rawData\ The\ data\ through\ which\ we\ should\ scan.\ Typically,\n\ \ this\ is\ going\ to\ be\ found\ by\ the\ "getData()"\ method.\ \n\ @param\ dataName\ The\ String\ of\ the\ varable,\ or\ information,\ we\ \n\ \ are\ searching\ for.\n\ \ \n\ @return\ The\ raw\ data\ that\ is\ associated\ with\ "dataName".\n
comment18.params=
comment18.target=java.lang.String\ getRawData()
comment18.text=\n\ Gets\ the\ raw\ JSON\ data\ from\ the\ server.\ This\ will\ return\ an\ unformatted\n\ String\ that\ contains\ all\ of\ the\ server's\ data.\n\ \n\ @return\ A\ String\ containing\ all\ of\ the\ data\ downloaded\ from\ the\ server,\n\ \ or\ a\ String\ starting\ with\ "ERROR\:"\ that\ describes\ any\ error\ that\ occurred\n\ \ while\ trying\ to\ read\ the\ data\ from\ the\ server.\n
comment19.params=command
comment19.target=java.lang.String\ executeCommand(java.lang.String)
comment19.text=\n\ This\ method\ will\ execute\ "command"\ in\ the\ respective\ terminal\ window.\n\ \n\ @param\ command\ The\ curl\ command\ that\ will\ get\ the\ data\ from\ the\ web\ server.\n\ @return\ The\ output\ from\ the\ command\ that\ was\ executed,\ or\ a\ String\ starting\ \n\ \ with\ "ERROR"\ if\ there\ is\ an\ error\ during\ the\ execution\ of\ the\ command.\n\ \ This\ may\ not\ always\ return\ a\ String\ containing\ "ERROR"\ if\ something\ went\n\ \ wrong,\ however;\ but\ if\ you\ see\ "ERROR",\ then\ there\ was\ 100%\ something\ wrong.\n
comment2.params=
comment2.target=java.lang.String\ formatPositions()
comment3.params=sensorName\ x\ y\ z
comment3.target=void\ updatePositionSensor(java.lang.String,\ int,\ int,\ int)
comment4.params=sensorName\ on
comment4.target=void\ updateStoveSensor(java.lang.String,\ boolean)
comment5.params=sensorName\ open
comment5.target=void\ updateWindowSensor(java.lang.String,\ boolean)
comment6.params=type\ x\ y\ z
comment6.target=java.lang.String\ addSensor(int,\ int,\ int,\ int)
comment6.text=\n\ \ \ \ 0\ \=\ Position\ sensor\n\ \ \ \ 1\ \=\ stove\n\ \ \ \ 2\ \=\ window\n
comment7.params=type
comment7.target=void\ addSensor(int)
comment8.params=
comment8.target=java.lang.String\ genSensor()
comment9.params=rawData\ name
comment9.target=java.lang.String\ getValue(java.lang.String,\ java.lang.String)
numComments=20
